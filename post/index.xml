<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 负熵为生</title>
    <link>https://zlikun.github.io/post/</link>
    <description>Recent content in Posts on 负熵为生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 06 Mar 2021 23:43:15 +0800</lastBuildDate><atom:link href="https://zlikun.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SDKMAN入门</title>
      <link>https://zlikun.github.io/post/devops/sdkman%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 06 Mar 2021 23:43:15 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/devops/sdkman%E5%85%A5%E9%97%A8/</guid>
      <description>SDKMAN 是一款软件开发包管理器，常用于管理JDK等二进制SDK包
安装 Linux系统下安装比较简单，这里请参照官方文档即可
$ curl -s &amp;#34;https://get.sdkman.io&amp;#34; | bash Windows系统下则会比较麻烦，因为SDKMAN依赖Linux系统下的一些组件（软件），所以在Windows上安装需要先安装这些依赖的组件
大致有三种方式
 安装 Windows Linux System（WLS） 安装 Cygwin 安装 Git Bash for Windows  做为开发人员通常已经安装了 Git Bash ，所以使用该方式最简单。安装 SDKMAN 之前还需要安装其它缺失工具：curl、unzip和sed，其中curl和sed默认已有安装，zip/unzip则需要手动安装（下载地址）。下载后解压，将zip.exe复制到 Git Bash 安装目录下的 mingw64/bin 目录下即可
在 Windows 系统上安装 SDKMAN 与 Linux 系统一致
# 下载安装 $ curl -s &amp;quot;https://get.sdkman.io&amp;quot; | bash $ sdk version SDKMAN 5.11.0+644 # 执行初始化（否则 sdk 命令不可用） $ source &amp;quot;~/.sdkman/bin/sdkman-init.sh&amp;quot; 用法 $ sdk help Usage: sdk &amp;lt;command&amp;gt; [candidate] [version] sdk offline &amp;lt;enable|disable&amp;gt; commands: install or i &amp;lt;candidate&amp;gt; [version] [local-path] uninstall or rm &amp;lt;candidate&amp;gt; &amp;lt;version&amp;gt; list or ls [candidate] use or u &amp;lt;candidate&amp;gt; &amp;lt;version&amp;gt; completion &amp;lt;bash|zsh&amp;gt; default or d &amp;lt;candidate&amp;gt; [version] home or h &amp;lt;candidate&amp;gt; &amp;lt;version&amp;gt; env or e [init|install|clear] current or c [candidate] upgrade or ug [candidate] version or v broadcast or b help offline [enable|disable] selfupdate [force] update flush [archives|tmp|broadcast|version] candidate : the SDK to install: groovy, scala, grails, gradle, kotlin, etc.</description>
    </item>
    
    <item>
      <title>Gitea安装</title>
      <link>https://zlikun.github.io/post/devops/gitea%E5%AE%89%E8%A3%85/</link>
      <pubDate>Wed, 18 Mar 2020 22:48:27 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/devops/gitea%E5%AE%89%E8%A3%85/</guid>
      <description>资料  https://docs.gitea.io/zh-cn/  准备 # 数据库（MySQL） # https://docs.gitea.io/zh-cn/database-prep/ # 创建数据库 &amp;gt; CREATE DATABASE DB_GITEA CHARACTER SET &#39;utf8mb4&#39; COLLATE &#39;utf8mb4_unicode_ci&#39;; # 创建用户 &amp;gt; CREATE USER &#39;gitea&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;Gitea!2020&#39;; # 用户授权 &amp;gt; GRANT ALL PRIVILEGES ON DB_GITEA.* TO &#39;gitea&#39;@&#39;%&#39;; # 刷新权限，立即生效 &amp;gt; FLUSH PRIVILEGES; # 用户 $ useradd gitea 安装 # 安装 # https://docs.gitea.io/zh-cn/install-from-binary/ # https://docs.gitea.io/zh-cn/install-from-package/ # https://docs.gitea.io/zh-cn/install-from-source/ $ curl -L https://dl.gitea.io/gitea/1.11.2/gitea-1.11.2-linux-amd64 -o /usr/local/bin/gitea $ chmod +x /usr/local/bin/gitea # 测试 $ gitea -v Gitea version 1.</description>
    </item>
    
    <item>
      <title>Maven之settings.xml配置</title>
      <link>https://zlikun.github.io/post/java/maven%E4%B9%8Bsettings.xml%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 18 Mar 2020 22:10:13 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/java/maven%E4%B9%8Bsettings.xml%E9%85%8D%E7%BD%AE/</guid>
      <description>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description>
    </item>
    
    <item>
      <title>Maven之私服搭建</title>
      <link>https://zlikun.github.io/post/java/maven%E4%B9%8B%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Wed, 18 Mar 2020 13:24:12 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/java/maven%E4%B9%8B%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</guid>
      <description>安装 前置
# Linux CentOS 7 $ cat /etc/redhat-release CentOS Linux release 7.7.1908 (Core) # Java OpenJDK 8 $ yum install java-1.8.0-openjdk-devel $ java -version openjdk version &amp;quot;1.8.0_242&amp;quot; OpenJDK Runtime Environment (build 1.8.0_242-b08) OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode) 安装
# https://help.sonatype.com/repomanager2/download # 注意：国内网络可能无法下载，考虑科学上网，或者从其它网站下载 $ curl -OL https://download.sonatype.com/nexus/oss/nexus-latest-bundle.tar.gz # https://help.sonatype.com/repomanager2/installing-and-running $ tar zxvf nexus-2.14.16-01-bundle.tar.gz -C /opt # /opt/nexus-2.14.16-01 Nexus服务程序目录 # /opt/sonatype-work 数据（构件）存放目录 # 创建 nexus 用户，因为 Nexus 不推荐使用 root 用户运行服务 # 注：不能是禁止登录无home目录的虚用户（程序使用 su 切换用户） $ useradd nexus # 修改目录拥有者属性，因为后面将使用 nexus 用户来运行服务 $ chown nexus:nexus -R /opt/nexus-2.</description>
    </item>
    
    <item>
      <title>CentOS-7安装后需要做的几件事</title>
      <link>https://zlikun.github.io/post/linux/centos-7%E5%AE%89%E8%A3%85%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Wed, 18 Mar 2020 01:52:17 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/linux/centos-7%E5%AE%89%E8%A3%85%E5%90%8E%E9%9C%80%E8%A6%81%E5%81%9A%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B/</guid>
      <description>修改主机名 $ hostnamectl set-hostname template 设置静态IP # 从 CentOS-7 就开始推荐使用 nmcli 来配置网络了（CentOS-8同样适用） # https://andyx.net/configuring_static_ip_address_in_rhel8_centos8_system_with_nmcli_nmtui_ifcfg/ # 配置IP $ nmcli con mod enp0s3 ipv4.addresses 192.168.1.100/24 # 配置网关 $ nmcli con mod enp0s3 ipv4.gateway 192.168.1.1 # 设置手动模式（dhcp = auto, static = manual） $ nmcli con mod enp0s3 ipv4.method manual # 配置DNS $ nmcli con mod enp0s3 ipv4.dns &amp;quot;8.8.8.8&amp;quot; # 配置开机启动 $ nmcli con mod enp0s3 connection.autoconnect yes # 实际上述命令执行结果依然是存储在 /etc/sysconfig/network-scripts/ifcfg-* 文件中，所以直接按原有方式修改该文件也是可以的 SSH公钥认证 # 密码认证常常不安全，所以采用公钥认证 # 修改 /etc/ssh/sshd_config 文件 # 关闭密码认证 PasswordAuthentication no # 启用公钥认证 PubkeyAuthentication yes # 重启sshd服务即生效 $ systemctl restart sshd # 注意要先将客户机的公钥上传至目标服务器上，否则后面可能就没办法ssh连过去了（密码认证被禁） # 客户机上生成公私钥命令 $ ssh-keygen -t rsa -C &amp;quot;zlikun@studio&amp;quot; # 会生成公私钥文件，私钥文件应妥善保存，不要外泄 # ~/.</description>
    </item>
    
    <item>
      <title>Nginx搭建直播服务</title>
      <link>https://zlikun.github.io/post/nginx/nginx%E6%90%AD%E5%BB%BA%E7%9B%B4%E6%92%AD%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Sun, 08 Mar 2020 13:22:01 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/nginx/nginx%E6%90%AD%E5%BB%BA%E7%9B%B4%E6%92%AD%E6%9C%8D%E5%8A%A1/</guid>
      <description>使用Nginx搭建RTMP直播流服务，提供直播流推送、直播播放、认证鉴权等功能
 协议  三大直播协议 RTMP、HTTP-FLV、HLS，RTMP是Adobe公司为Flash播放器开发的私有直播协议，FLV是Adobe公司推出的另一种视频格式，而HTTP-FLV就是将流媒体数据封装成FLV格式并通过HTTP协议传输给客户端，而HLS则是Apple公司基于HTTP协议开发的流媒体传输协议，它会在服务器端将流媒体数据切割成连续的时长较短的ts小文件，并通过m3u8索引文件按序访问ts文件，而客户端只需要按序从服务器上获取ts文件来播放即可。一般RTMP在直播推流中用的多，而HLS则比较适合来播放视频用，但其会生成海量ts小文件，从而造成存储困难，所以一般使用云存储服务（七牛、阿里云等）比较好。
 参考
 https://www.cnblogs.com/upyun/p/9881865.html https://www.jianshu.com/p/32417d8ee5b6  安装 https://github.com/arut/nginx-rtmp-module
# 系统为 CentOS-7 ，使用 YUM 安装了 Nginx，为了添加 nginx-rtmp-module 模块，所以需要重新编译安装 # 通过 `nginx -V` 命令查看其原始编译信息，重点是其已安装的模块，后面编译安装时这些模块一并装上 $ nginx -V nginx version: nginx/1.16.1 built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) built with OpenSSL 1.0.2k-fips 26 Jan 2017 TLS SNI support enabled ... ... # http://nginx.org/en/docs/install.html # http://nginx.org/en/docs/configure.html # 下载源码，版本与当前使用 nginx 版本一致 $ curl -OL http://nginx.org/download/nginx-1.16.1.tar.gz $ tar zxvf nginx-1.</description>
    </item>
    
    <item>
      <title>Hugo入门</title>
      <link>https://zlikun.github.io/post/hugo/01-hugo%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 23 Feb 2020 20:06:40 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/hugo/01-hugo%E5%85%A5%E9%97%A8/</guid>
      <description>官方网站
 Hugo 是一个静态网页生成程序，基于Golang实现，但其打包后的程序不依赖外部环境，这点要比Hexo和Jekyll要好一些，另外因为是Golang实现的，其运行速度非常快，笔者选择Hugo做为静博客的生成程序
 安装 https://gohugo.io/getting-started/installing/
# 笔者使用Manjaro系统（Linux）做为开发桌面系统， # 可以直接通pacman命令来安装，其它系统的安装方法参考官方文档 $ sudo pacman -S hugo # 查看版本以确认是否成功安装 $ hugo version Hugo Static Site Generator v0.64.0/extended linux/amd64 ... 示例 https://gohugo.io/getting-started/quick-start/
https://gohugo.io/getting-started/usage/
# 通过 help 子命令可以查看 hugo 的所有命令和子命令用法， # 当然你也可以通过 man 来查看 # 创建站点，需要指定一个目录，需要注意这个目录可以不存在， # 但如果存在，则必须是一个空目录 $ hugo new site hugo.zlikun.com # 目录结构 $ tree hugo.zlikun.com/ hugo.zlikun.com/ ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 6 directories, 2 files # 最主要的几个目录/文件分别是： # config.</description>
    </item>
    
    <item>
      <title>SSH基本用法</title>
      <link>https://zlikun.github.io/post/linux/ssh%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 23 Feb 2020 20:04:44 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/linux/ssh%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>生成密钥 # 生成RSA密钥对，默认存储于 ~/.ssh/ 目录下，-C 参数指定备注信息 $ ssh-keygen -t rsa [-C &amp;quot;zlikun-dev@hotmail.com&amp;quot;] # ~/.ssh/id_rsa # ~/.ssh/id_rsa.pub # 查看 ssh-keygen 帮助信息 $ man ssh-keygen # 分发密钥，默认发送 ~/.ssh/id_rsa.pub 文件，也可以通过 -i 显示指定 $ ssh-copy-id [-i id_rsa.pub] &amp;lt;username&amp;gt;@&amp;lt;host&amp;gt;[:&amp;lt;port&amp;gt;] # 实际上是把密钥追加到目标服务器的 ~/.ssh/authorized_keys 文件中，所以使用其它方式追加都是可以的 # 如果是第一次手工创建文件，务必注意文件权限问题，设置为只有当前用户有读写权限（600或644）即可 $ ls -al ~/.ssh/authorized_keys -rw------- 1 root root 808 Jan 31 18:52 /root/.ssh/authorized_keys # chmod 600 /root/.ssh/authorized_keys 密钥登录 # 参考上面的步骤将公钥添加到目标服务器上 # 修改目标服务器的SSH配置 $ vim /etc/ssh/sshd_config # 允许密钥认证 PubkeyAuthentication yes # 指定密钥路径（默认值） AuthorizedKeysFile .</description>
    </item>
    
    <item>
      <title>Manjaro基本配置</title>
      <link>https://zlikun.github.io/post/linux/manjaro%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 23 Feb 2020 19:53:39 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/linux/manjaro%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>更换源 # 排列选择一个国内源，然后执行更新同步 sudo pacman-mirrors -i -c China -m rank sudo pacman -Syy # 添加Arch源 sudo vim /etc/pacman.conf [archlinuxcn] SigLevel = Optional TrustedOnly Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux-cn/$arch # 更新数据库并安装密钥 sudo pacman -Syy &amp;amp;&amp;amp; sudo pacman -S archlinuxcn-keyring # 升级系统 sudo pacman -Su pacman  pacman 是 Arch 系Linux自带的包管理器，下面是一些常用命令
 pacman -S package_name # 安装软件 pacman -S extra/package_name # 安装不同仓库中的版本 pacman -Syu # 升级整个系统，y是更新数据库，yy是强制更新，u是升级软件 pacman -Ss string # 在包数据库中查询软件 pacman -Si package_name # 显示软件的详细信息 pacman -Sc # 清除软件缓存，即/var/cache/pacman/pkg目录下的文件 pacman -R package_name # 删除单个软件 pacman -Rs package_name # 删除指定软件及其没有被其他已安装软件使用的依赖关系 pacman -Qs string # 查询已安装的软件包 pacman -Qi package_name # 查询本地安装包的详细信息 pacman -Ql package_name # 获取已安装软件所包含的文件的列表 pacman -U package.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://zlikun.github.io/post/about/</link>
      <pubDate>Sun, 23 Feb 2020 13:39:33 +0800</pubDate>
      
      <guid>https://zlikun.github.io/post/about/</guid>
      <description>测试页！！！ 测试页！！！</description>
    </item>
    
  </channel>
</rss>
